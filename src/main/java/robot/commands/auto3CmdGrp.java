// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: SequentialCommandGroup.

package robot.commands;
import java.util.List;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.ProfiledPIDController;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.geometry.Translation2d;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryConfig;
import edu.wpi.first.math.trajectory.TrajectoryGenerator;
import edu.wpi.first.math.util.Units;
import edu.wpi.first.wpilibj2.command.InstantCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import edu.wpi.first.wpilibj2.command.SwerveControllerCommand;
import robot.Constants.AutoConstants;
import robot.Constants.DriveTrainConstants;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import robot.subsystems.drivetrainSubSys;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

public class auto3CmdGrp extends SequentialCommandGroup {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    public SequentialCommandGroup auto3CmdGrp(drivetrainSubSys drivetrainSubSys){

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

    // Step 1. Configure trajectory settings and add a Kinematics constraint
    //          to ensure no wheel velocity goes above max velocity
    TrajectoryConfig trajectoryConfig = new TrajectoryConfig(
          AutoConstants.kMaxSpeedMetersPerSecond,
          AutoConstants.kMaxAccelerationMetersPerSecondSquared);
    trajectoryConfig.setKinematics(DriveTrainConstants.kDriveKinematics);

    // Step 2. Create a "trajectory" object
    //      Steps:
    //          a) Go 3 ft forward
    //          b) Go 3 Ft forward while also going 3 ft left while also rotating 180 degrees
    Trajectory trajectory = TrajectoryGenerator.generateTrajectory(
            new Pose2d(Units.inchesToMeters(0), Units.inchesToMeters(0), new Rotation2d(0)),
            List.of(
                    new Translation2d(Units.inchesToMeters(36), Units.inchesToMeters(0)),
                    new Translation2d(Units.inchesToMeters(36), Units.inchesToMeters(-36))),
            new Pose2d(Units.inchesToMeters(72), Units.inchesToMeters(-36), Rotation2d.fromDegrees(180)),
            trajectoryConfig);

    // Step 3. Define PID controllers for tracking trajectory
    PIDController xController = new PIDController(AutoConstants.kPXController, 0, 0);
    PIDController yController = new PIDController(AutoConstants.kPYController, 0, 0);
    ProfiledPIDController thetaController = new ProfiledPIDController(
            AutoConstants.kPThetaController, 0, 0, AutoConstants.kThetaControllerConstraints);
    thetaController.enableContinuousInput(-Math.PI, Math.PI);

    // Step 4. Construct command to follow the trajectory.
    SwerveControllerCommand swerveControllerCommand = new SwerveControllerCommand(
            trajectory,
            drivetrainSubSys::getPoseMeters,
            DriveTrainConstants.kDriveKinematics,
            xController,
            yController,
            thetaController,
            drivetrainSubSys::setSwerveModulesStates,
            drivetrainSubSys);

    // Step 5. Add some init and wrap-up, and return everything to run
    return new SequentialCommandGroup(
                new InstantCommand(() -> drivetrainSubSys.resetOdometry(trajectory.getInitialPose())),
                swerveControllerCommand,
                new InstantCommand(() -> drivetrainSubSys.stopSwerveMotors())
            );
    
    }
}

    // addCommands(
    //     // Add Commands here:
    //     // Also add parallel commands using the
    //     //
    //     // addCommands(
    //     //      new command1(argsN, subsystem),
    //     //      parallel(
    //     //          new command2(argsN, subsystem),
    //     //          new command3(argsN, subsystem)
    //     //      )    
    //     //  );
    //     );
    // }

    // @Override
    // public boolean runsWhenDisabled() {
    //     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    //     return false;

    // // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    // }
    